Do's and Dont's I followed which made me a good Frontend Engineer.

3 Tips to overcome fear of FrontEnd Engineering as career üî•

[1] JavaScript - Understand & give yourself time to get through the fundamental concepts of JS first.

[2] CSS - Learn the CSS core concepts first. CSS Units, Selectors, Box Model, Positions, Flexbox. Mostly you‚Äôll need only these.

[3] UI - Improve your thought process understanding UI components, Design, State, Logic. You‚Äôve ample applications & components in many Websites to explore.

3 things to know about DSA in FrontEnd Interviews üî•

[1] It‚Äôs a Problem solving round not a DSA round where you expect direct Knapsack, Djikstra, Prim‚Äôs Algorithms.

[2] No direct LeetCode problems but you‚Äôll be asked Implementation based Quesstions like Polyfills, Flatten Array, Debounce, ‚ÄòN‚Äô async tasks in series.

[3] Important basic DS concepts to know - Recursion, Trees, Graphs, DFS & BFS Traversals.


3 Tips to follow with your Interviewer in FrontEnd Interviews üî•

[1] Dry-run - Don‚Äôt just blindly say output of Questions. Think, dry-run, apply concepts & give correct answer.

[2] Explanation - Don‚Äôt just say Final output answer. Explain what‚Äôs going on in code step-by-step like concepts used.

[3] Discussion - Don‚Äôt just start coding. Discuss what & how you‚Äôre thinking to approach or code this.


3 Important concepts where you‚Äôll go wrong in FrontEnd Interviews üî•

Fundamentally, If you understand the differences between these concepts, your good to go.

[1] Prototypes vs __proto__
[2] Lexical Scope vs Closures
[3] Callback Queues vs Microtask Queues

3 mistakes to avoid in FrontEnd Machine Coding (UI Rounds) üî•

[1] Not giving enough time to think & design your Component‚Äôs state.

[2] Not focussing more on logic & implementation, but worried of CSS.

[3] Focussing more on writing Clean Code in first go itself.


3 reasons to prove FrontEnd is not only UI üî•

[1] Web Assembly - You can write code in languages like Rust, C, C++ & run in Browsers achieving nearly native performance boost.

[2] PWAs - You can build nearly Native Apps with Web Technologies. Heard of these apps, Facebook Lite, Instagram Lite, Twitter Lite.

[3] Web Security - FrontEnd is most prone to attacks & compromising it leads the Golden path to your Database, Servers, Services,..





‚ùå Things which I didn't

‚Ä¢ Building toy projects for resume
‚Ä¢ Learning multiple Tech stacks
‚Ä¢ Referring 20mins Youtube tutorials only
‚Ä¢ Procrastinate on what to learn
‚Ä¢ Bad Resume, no technical details, broken links
‚Ä¢ Commenting interested on LinkedIn

‚úÖ Things which I did

‚Ä¢ Built complex frontend projects (vanilla js)
‚Ä¢ Focussed on core concepts of JS & Web
‚Ä¢ Learnt one in-demand skill (React)
‚Ä¢ Habit of reading Docs, Tech Talks üéß
‚Ä¢ Fine tuned resume with all Technical highlights
‚Ä¢ Make 20-30 valuable connections from companies on LinkedIn

Doing your Frontend Interview Preparation this way - (might not be effective!!)

‚ùå Practice number of questions of JS concepts

‚ùå Just code previously asked Machine Coding Questions

‚ùå Having very minimal knowledge on my projects

‚ùå Trying to learn all of Web Fundamentals overnight

This pattern of learning has always helped me,

‚úÖ Learn JS concepts well to tackle any questions

‚úÖ Give time to think on UI component‚Äôs State & Data flow (Most Important)

‚úÖ Knowing ins & outs of my projects, challenges, Tech (Projects are your Proof of Concepts)

‚úÖ Sparing time on weekends to explore around Fundamentals slowly.



DSA, Leetcode is trending. But don‚Äôt confuse it in your Frontend Interviews ‚ùå

Top Unicorn companies & Growth Startups focus on your core JavaScript + Problem solving ability üí°

1Ô∏è‚É£ It‚Äôs a Problem solving round not a traditional DSA round where you expect direct Knapsack, Djikstra, Prim‚Äôs Algorithms.

2Ô∏è‚É£ You need not grind Leetcode. You‚Äôll be asked Implementation based Quesstions like Polyfills, Flatten Array, Debounce, ‚ÄòN‚Äô async tasks in series.

3Ô∏è‚É£ Important & Basic DSA concepts to know - Recursion, Trees, Graphs, DFS & BFS Traversals.


My 3 step strategy on how you can master Frontend Engineering in deep:

‚Ä¢ 10mins Youtube video doesn‚Äôt help
‚Ä¢ Learning the fastest way doesn‚Äôt help
‚Ä¢ Skipping the fundamentals doesn‚Äôt help
‚Ä¢ Learning just the code instead of concepts doesn‚Äôt help

I would want you guys to try it this way. It‚Äôs slow process, but that‚Äôs what makes an impact in long run ‚ö°Ô∏è

1Ô∏è‚É£ Stop learning just code of any new Tech. It will change.

For example, React is pushing to migrate from class based to functional components. A lot of new APIs.

2Ô∏è‚É£ Every Framework or Library comes with a purpose to solve a problem statement.

Learn the ‚Äòwhy‚Äô of the problem statement, strategies, patterns, underlying mechanisms used to solve it.

3Ô∏è‚É£ Don‚Äôt just end up with Youtube tutorial, ‚Äú15 mins of this Tech, that Tech‚Äù.

Go deep. Spend time listening to conferences, tech talks/articles, podcasts by the official developers who‚Äòve built/contributed.

1Ô∏è‚É£ This can be game changer in your next Frontend Interviews.

Thought process üí°

Something which is very much visible in your ‚ÄòMachine Coding‚Äô rounds.

This round is my favorite ‚ù§Ô∏è in every Unicorn companies I interviewed,

‚Üí Flipkart, BrowserStack, Zoho, Observe(dot)ai ,

Thought Process is not only how you discuss. But also how you develop.

‚Ä¢ How ‚Äòfast‚Äô you think ‚ö°Ô∏è
‚Ä¢ How fast you convert it into ‚Äòcode‚Äô
‚Ä¢ Alternative & practical approaches
‚Ä¢ The ‚Äòwhy‚Äô behind your thought process

How did I develop it?

‚Üí It‚Äôs because of my Frontend Intensive projects I built.

‚Ä¢ Logical decisions
‚Ä¢ Complex UI structuring
‚Ä¢ Managing raw state (No React)
‚Ä¢ Understanding Data flow
‚Ä¢ Event Management
‚Ä¢ Code modularity
‚Ä¢ Technical challenges

I want to you guys to build complex Frontend projects to ease your next ‚ÄòMachine Coding‚Äô round



Companies are ready to pay >15-20LPA for a Frontend Engineer with ‚Äòzero DSA skills‚Äô üí∞

Learning JavaScript can get you great earning opportunities üí∞ (>10LPA)

When it comes to Frontend, you know JS is the only thing. You don‚Äôt need to confuse learning multiple languages.

Your career will always be safe, because of the super & ever growing Ecosystem.

The Most In-demand skill in Job Market ‚ÄúReact‚Äù, is built on top of JS.

Very straightforward Interview patterns, judging your core & conceptual knowledge of JS.

üëâ You can grab a high paying job
üëâ You can freelance building great projects
üëâ You can teach your Frontend skills

Absolutely, YES.

Multiple High Growth Startups & Unicorns ü¶Ñ like,

(BrowserStack, Razorpay, Cred, Stripe, Thoughtworks, Coinbase, Gojek, Twilio)

But, you‚Äôve to be really good with Frontend Engineering. Becuase that‚Äôs what their Interview process will be evaluated on.

For that, the ‚ÄòResume Shortlisting‚Äô has to happen.

Let it be via,
- Recruiters
- Referrals
- Career Page/ATS

Now, inorder to get shortlisted your resume needs to stand out.

The importance of PROJECTS in your resume,

- Shows your Technical skills & credibility
- Covers 40-50% of your resume section
- Creates a trust factor for people to refer





 WEB FUNDAMENTALS

‚Ä¢ Async, Defer scripts
‚Ä¢ DOM manipulation
‚Ä¢ Security - CORS, CSRF
‚Ä¢ Events - Bubble, Capture, Target, Delegation
‚Ä¢ Storage - Cookies, Local, Session
‚Ä¢ HTTP - Methods, Status, Headers, Query Params


HTML 5

1 https://www.w3schools.com/html/
2 https://www.w3schools.com/html/html_responsive.asp

1Ô∏è‚É£ HTML

(Scope of questions are less here, but can be asked many general stuff)

‚Ä¢ Block, Inline, Inline-Block
‚Ä¢ Event handling on elements
‚Ä¢ Semantic Elements
‚Ä¢ Impact of display none, hidden, opacity


CSS 3

3 Tips to overcome fear of CSS in FrontEnd Interviews üî•

[1] Learn the core concepts of CSS first. Topics like CSS Units, Selectors, Specificity, Box Model, Positions, Flexbox.

[2] Build 1-2 small CSS based projects applying the above core concepts to have Hands-on practice.

[3] You need not remember all of the CSS properties, values. Many of those are use-case dependent & you can just Google it. CSS is just highly over-rated fear for Interviews.


1 https://www.w3schools.com/css/
2 https://css-tricks.com/debugging-css/
3 https://debuggingcss.com/ ( we will purches later ) 



2Ô∏è‚É£ CSS

‚Ä¢ Box sizing
‚Ä¢ Box model
‚Ä¢ Positions
‚Ä¢ CSS units
‚Ä¢ Selector specificity
‚Ä¢ Flexbox



CSS FRAME WORK

1 https://tailwindcss.com/
2 https://www.w3schools.com/bootstrap5/


JAVASCRIPT

1 https://www.w3schools.com/js/
2 https://www.tutorialstonight.com/js/javascript-tutorial
3 https://www.youtube.com/playlist?list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP
4 https://learnjavascript.online/app.html (refer only topic from menu bar )
5  https://learnersbucket.com/javascript-interview-guide-ebook/ ( we will learn in end ) 


IMPORTANT JAVASCRIPT CONCEPT TO START REACTJS 

- arrow function
- array methods
- normal functions
- spread operators
- function expressions
- default imports
- handling events
- lexical scoping
- String Methods
- named imports
- async await
- destructuring
- map
- filter
- reduce
- loops
- promises
- callbacks
- variables
- scopes
- working with objects
- asynchronous JS


NATIVE JAVASCRIPT PROJECT 

1 https://www.tutorialstonight.com/html-code-for-registration-form-with-validation
2 https://www.tutorialstonight.com/age-calculator-in-javascript
3 https://www.tutorialstonight.com/javascript-bmi-calculator
4 https://www.tutorialstonight.com/html5-digital-clock-with-javascript 


ES6 / ECMA SCRIPT

https://www.w3schools.com/js/js_es6.asp


REACT JS 

1 https://namastedev.com/namaste-react/

3 Most common mistakes to avoid while learning React üî•

[1] Not understanding Type coercion & Short circuiting well, which leads to unpredictable bugs.

[2] Not understanding the concepts of Referential Equality & Mutations. It‚Äôs important to understand State & Props.

[3] Not understanding Closures well, which leads to Stale State, multiple state updates using setState.

3 things to consider learning as Advanced React Developer üî•

[1] Error Handling - Make use of Error Boundaries across your Components to ensure Consistent Behaviour in App.

[2] Testing - Apply good practices of testing your components, unit testing with Jest, React Testing Library.

[3] Design Patterns - Learn patterns like HOCs, Render Props, Custom Hooks, Compound Components,.. for re-useability, composability, logic isolation.


Become a Pro React Developer? Follow the steps,

‚ñ∂Ô∏è Build solid JS projects

Helps you realize why React is even required at the first place. Complex state management, janky UI updates, Project organizing, Data flow.

‚ñ∂Ô∏è Strengthen core concepts of JS

React is heavily dependent on concepts like closures, ‚Äòthis‚Äô keyword. Helps you trace your code‚Äôs working & debug faster.

‚ñ∂Ô∏è Learn Design Patterns

Patterns like Render props, HOCs, Compound components, Custom Hooks, Composition. Helps you write better quality code with re-useability, logical isolation.

‚ñ∂Ô∏è Write Typescript

Make your code more predictable, having full control of the code flow with static types with less room for errors. The industry is adopting it, so do you.


REACT JS  PROJECT

1 YOUTUBE clone
2 SWIGYY clone



INTERVIEW PREPATION TIPS / TRICKS

Dont aim 100% rather aim 70% while preparing for Frontend Interviews.

Often we get stuck in an endless loop ‚ôæÔ∏è underestimating yourself that you‚Äôre not prepared yet.

Take a chance, don‚Äôt decide ‚ùå the result yourself way before even attempting the Interview.

But don‚Äôt skip core points / basics,

Learning new Techs is not bad, in fact it's good for projects üìà but understand the difference when it comes to Interviews.

(Interviewers are always looking for candidates with strong fundamental knowledge & problem-solving ability)



Three tips to be in Interview mode for Frontend Interviews üî•

1Ô∏è‚É£ Javascript Round:

Solve 1 or 2 JS questions daily (conceptual, output, implementation based). Just like you do Leetcode daily challenge.

2Ô∏è‚É£ Machine Coding Round:

Keep building one small UI project on every other weekends (vanilla JS and react based).

3Ô∏è‚É£ Engineering Manager Round:

Read some technical blogs, articles or listen to podcasts of official contributors ‚ö°Ô∏èaround fundamental concepts of web, javascript in your free time.


1. Javascript
2. Machine Coding / React / Angular 
3. DSA
4. System design
5. Managerial Round


1 Most FrontEnd Interviews are categorized in these 3 buckets - JavaScript Round, Machine
  Coding Round, UI Tech Round

A. JavaScript Round

	For Conceptual Based
	For Output Based
	For Implementation Based 

B. Machine Coding (UI) Round


React

Machine coding (around 60-120min)

Here‚Äôs my 3 step breakdown on cracking Frontend Machine Coding rounds.

üî∏ Questions pattern

(For longer Interview hours - Logical feature of Apps)

‚Ä¢ WhatsApp Web UI
‚Ä¢ Instagram Comments Section
‚Ä¢ Design Movies Page
‚Ä¢ Design Carrom Board

(For shorter Interview hours - Small UI components)

‚Ä¢ Dropdown
‚Ä¢ Autocomplete
‚Ä¢ Multi Select
‚Ä¢ Star Ratings

üî∏ Practice

(99% of the times you‚Äôll only need these coding utilities)

‚Ä¢ useState
‚Ä¢ useEffect
‚Ä¢ Context
‚Ä¢ Fetch API
‚Ä¢ CSS flexbox, positions
‚Ä¢ ES6 - map, filter, spread, arrow funcs
‚Ä¢ setTimeout, setInterval
‚Ä¢ Event handling

üî∏ Mistakes

(Don‚Äôt waste your time on these)

‚Ä¢ Writing Clean code
‚Ä¢ File structure
‚Ä¢ Beautifying UI
‚Ä¢ Breaking UI to 20, 30 useless components

Focus on logical implementation with a working model first. This is what Interviewers care about.

Ref https://onestopfrontend.graphy.com/courses/One-Stop-Frontend-Projects-We-build-zero-toy-projects--6465e1cae4b0ad0c60a01e86-6465e1cae4b0ad0c60a01e86



üíÅ‚Äç‚ôÇÔ∏è Star Rating
üíÅ‚Äç‚ôÇÔ∏è Design Pop Over
üíÅ‚Äç‚ôÇÔ∏è Design Accordion
üíÅ‚Äç‚ôÇÔ∏è Design Carousel
üíÅ‚Äç‚ôÇÔ∏è Design grid using HTML/CSS and Javascript with search and sort, event bubbling (Amazon onsite)
üíÅ‚Äç‚ôÇÔ∏è Design NavBar
üíÅ‚Äç‚ôÇÔ∏è Infinite Scroll
üíÅ‚Äç‚ôÇÔ∏è Typeahead / autocomplete using trie
üíÅ‚Äç‚ôÇÔ∏è Implement Debounce function
üíÅ‚Äç‚ôÇÔ∏è Implement tic tac toe
üíÅ‚Äç‚ôÇÔ∏è Make snake ladder board
üíÅ‚Äç‚ôÇÔ∏è Make calendar of any Month like Date Picker
üíÅ‚Äç‚ôÇÔ∏è Implement throttle function ect
üíÅ‚Äç‚ôÇÔ∏è Dropdown
üíÅ‚Äç‚ôÇÔ∏è Autocomplete
üíÅ‚Äç‚ôÇÔ∏è Multi Select


C. Engineering Manager Round

Frontend is just UI - just learn ‚Äúhtml, css, js‚Äù

Easy job, easy money, easy life. This might be potentially what people think of Frontend (the myth)

Fact: There‚Äôs so much you can learn in frontend üî•



üî∏ Network

* Websocket
* Streams
* WebRTC
* http/2
* QUIC

üî∏ Media

* MediaStream
* Media Recorder
* Screen Capture

üî∏ DOM

* DOM API
* Intersection Observer
* Mutation Observer
* Resize Observer
* iframes

üî∏ Storage, Data, Files

* Cookies
* Local, Session storage
* IndexedDB
* Clipboard
* File System

üî∏ Performance

* Web workers
* Web vitals
* Memory profiling

üî∏ Graphics

* Canvas
* WebGL

üî∏ Security

* Trusted Type
* Permissions
* Encoding
* CSP, XSS, Mime sniff

üî∏ Build

* Treeshaking
* Code splitting
* Hot Module Replacement
* Transpilers & Polyfills

üî∏ Asset

* Prefetch, preload
* Compression techniques - Gzip, Brotli
* Dynamic image loading
* Lossy, lossless conversions
* Pixel density, PPI

üî∏ DOM API:

‚Ä¢ Selecting nodes
‚Ä¢ Node properties & methods
‚Ä¢ Manipulating UI via DOM
‚Ä¢ Tracking states of elements
‚Ä¢ Element dimension & positions

üî∏ Event handling:

‚Ä¢ Types of user events
‚Ä¢ Event phases - capturing, bubbling
‚Ä¢ Event delegation
‚Ä¢ Dispatch custom events
‚Ä¢ Behaviour of individual events
‚Ä¢ Understand event driven model

üî∏ Browser API:

‚Ä¢ Storage, clipboard, Notification, File
‚Ä¢ Fetch, Websockets, WebRTC
‚Ä¢ MediaStream, Recorder, Capture

üî∏ Miscellaneous:

‚Ä¢ 2D, 3D Graphics using Canvas, WebGL
‚Ä¢ Integrating iframes
‚Ä¢ Webworker








